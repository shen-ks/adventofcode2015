package org.shen.adventofcode.year_2015;import java.io.IOException;import java.nio.charset.StandardCharsets;import java.nio.file.Path;import java.util.HashSet;import java.util.Scanner;public class GridTraversal {				public static void main(String[] args) throws IOException {		int[] positionSanta = new int[]{0, 0};		int[] positionRobot = new int[]{0, 0};		int i = 0;		HashSet<String> visitedBySanta = new HashSet<>();		HashSet<String> visitedByRobot = new HashSet<>();		visitedBySanta.add("0,0");		visitedByRobot.add("0,0");		System.out.println("Read the input file \"Directions for Santa \":");		try (Scanner scanLine = new Scanner(Path.of("/Volumes/Sector 3/adventofcode2015/Day3_GridPatternInput.txt"), StandardCharsets.UTF_8)) {			while (scanLine.hasNextLine()) {				String path = scanLine.nextLine();				for (char step : path.toCharArray()) {					System.out.println("Step " + step + " index:" + i);										if (i % 2 == 0) {						System.out.println("Santa is at " + positionSanta[0] + "," + positionSanta[1]);						moveToPath(step, positionSanta, visitedBySanta);					} else {						System.out.println("Robot is at " + positionRobot[0] + "," + positionRobot[1]);						moveToPath(step, positionRobot, visitedByRobot);					}				i++;				}			}									visitedByRobot.removeAll(visitedBySanta);			System.out.println("Cells visited by Santa at least once: " + visitedBySanta.size() + " \n Cells visited by Robot at least once: " + visitedByRobot.size());					}	}		private static void moveToPath(char step, int[] position, HashSet<String> visitedBy) {		switch (step) {			case '>' -> position[1]++;			case '<' -> position[1]--;			case 'v' -> position[0]--;			case '^' -> position[0]++;		}		String cell = position[0] + "," + position[1];		if (visitedBy.contains(cell)) {			System.out.println("Cell " + cell + " visited by current player more than once");		} else {			visitedBy.add(cell);		}	}}